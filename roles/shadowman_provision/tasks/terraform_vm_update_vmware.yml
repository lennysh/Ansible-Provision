---
- name: Sync with Gitrepo
  ansible.builtin.git:
    repo: 'git@github.com:shadowman-lab/Ansible-Terraform-vSphere.git'
    dest: /tmp/terraform
    version: main
    accept_newhostkey: true
    key_file: "{{ cert_key_file }}"

# Leverage GitOps for updating main.tf
- name: Copy terraform main file
  ansible.builtin.copy:
    src: files/vmwaremain.tf
    dest: /tmp/terraform/vmware/main.tf
    owner: root
    group: root
    mode: '0644'
  when: terraformmain == "gitops"

# Set owner from Git webhook
- name: Set owner if using webhook
  ansible.builtin.set_fact:
    owner: "{{ tower_webhook_payload.head_commit.author.username }}@shadowman.dev"
  when: terraformmain == "gitops"

# Remove if desired to manually update terraform file
- name: Update terraform main file
  ansible.builtin.template:
    src: templates/terraformvmware.tf.j2
    dest: /tmp/terraform/vmware/main.tf
    owner: root
    group: root
    mode: '0644'
  when: terraformmain == "ansible"

- name: Decrypt files
  ansible.builtin.expect:
    command: 'ansible-vault decrypt terraform.tfstate terraform.tfstate.backup terraform.tfvars'
    chdir: /tmp/terraform/vmware
    responses:
      password: "{{ pah_pass }}"

- name: Update State of VM from template using Terraform to {{ terraform_state }}
  cloud.terraform.terraform:
    project_path: "/tmp/terraform/vmware/"
    state: "{{ terraform_state }}"
  register: terraformvms

- name: Encrypt files
  ansible.builtin.expect:
    command: 'ansible-vault encrypt terraform.tfstate terraform.tfstate.backup terraform.tfvars'
    chdir: /tmp/terraform/vmware
    responses:
      password: "{{ pah_pass }}"

- name: Update git repo with terraform files
  ansible.builtin.shell: git add -A && git commit -m "Synching new files to repo" && git config --global core.sshCommand 'ssh -i {{ cert_key_file }} -F /dev/null' && git push
  args:
    chdir: /tmp/terraform
  environment:
    GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
    GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
    GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
    GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"

- name: Display Current Terraform VMs
  ansible.builtin.debug:
    msg: "{{ terraformvms | json_query('outputs.*.value') }}"

- name: Set stat for active vms if using gitops/manual update
  ansible.builtin.set_stats:
    data:
      vm_name: "{{ terraformvms | json_query('outputs.*.value') | join(',') }}"
  when: terraformmain == "gitops"

- name: Set fact for vmnames for tagging
  ansible.builtin.set_fact:
    vm_names: "{{ terraformvms | json_query('outputs.*.value') }}"
  when: terraformmain == "gitops"

- name: VMWare Tags block
  when: terraform_state == "present"
  block:

    - name: Ensure Tags are created
      community.vmware.vmware_tag:
        category_id: "{{ item.category_id }}"
        tag_name: "{{ item.name }}"
        state: present
        validate_certs: false
      loop:
        - { name: "{{ env | default('dev') }}", category_id: 'urn:vmomi:InventoryServiceCategory:4d358ccf-dbca-4fc8-8600-3e88ec1e09ff:GLOBAL' }
        - { name: "{{ owner | default('shadowman') }}", category_id: 'urn:vmomi:InventoryServiceCategory:1e759721-5b8c-4bc5-8550-ca042a4818b0:GLOBAL' }

    - name: Assign Tags
      community.vmware.vmware_tag_manager:
        tag_names:
          - tag: "{{ operating_system_tag }}"
            category: operating_system
          - tag: "{{ env | default('dev') }}"
            category: environment
          - tag: "{{ owner | default('shadowman') }}"
            category: owner
        object_name: "{{ item }}"
        object_type: VirtualMachine
        state: add
        validate_certs: false
      loop: "{{ vm_names }}"

    - name: Loop to create group for linux hosts
      ansible.builtin.include_tasks: add_host_loop_vmware_terraform.yml
      loop: "{{ vm_names }}"
      when: operating_system is match("RHEL.*")
