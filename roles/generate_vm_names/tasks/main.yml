---

- name: Establish schema
  ansible.builtin.set_fact:
    vm_name_prefix: "{{ owner.split('@')[0] }}-{{ env }}-"

- name: Block for VMWare
  when: shadowman_provision_hypervisor == "VMWare"
  block:

    - name: List all VMs in the vCenter
      community.vmware.vmware_vm_info:
        validate_certs: false
        show_cluster: false
        show_datacenter: false
        show_datastore: false
        show_esxi_hostname: false
        show_folder: false
        show_mac_address: false
        show_net: false
        show_resource_pool: false
      register: all_vms_info

    - name: Filter VMs based on prefix and determine the maximum number
      ansible.builtin.set_fact:
        max_existing_vm_number: "{{ (all_vms_info.virtual_machines | selectattr('guest_name', 'match', vm_name_prefix ~ '\\d+(\\.ad)*\\.shadowman\\.dev$') | map(attribute='guest_name') | map('regex_search', '\\d+') | map('int') | list + [0]) | max }}"

- name: Block for Azure
  when: shadowman_provision_hypervisor == "Azure"
  block:

    - name: List all VMs in Azure
      azure.azcollection.azure_rm_virtualmachine_info:
      register: all_vms_info

    - name: Filter VMs based on prefix and determine the maximum number
      set_fact:
        max_existing_vm_number: "{{ (all_vms_info.vms | selectattr('name', 'match', vm_name_prefix ~ '\\d+(\\.ad)*\\.shadowman\\.dev$') | map(attribute='name') | map('regex_search', '\\d+') | map('int') | list + [0]) | max }}"

- name: Block for AWS
  when: shadowman_provision_hypervisor == "AWS"
  block:

    - name: List all VMs in AWS region
      amazon.aws.ec2_instance_info:
        region: us-east-2
      register: all_vms_info

    - name: Filter VMs based on prefix and determine the maximum number
      set_fact:
        max_existing_vm_number: "{{ (all_vms_info.instances | selectattr('tags.Name', 'match', vm_name_prefix ~ '\\d+(\\.ad)*\\.shadowman\\.dev$') | map(attribute='tags.Name') | map('regex_search', '\\d+') | map('int') | list + [0]) | max }}"

- name: Increment max_existing_vm_number safely
  ansible.builtin.set_fact:
    start_number: "{{ (max_existing_vm_number | int) + 1 }}"

- name: Create all RHEL VM Names
  ansible.builtin.set_fact:
    vm_names: "{{ vm_names | default([]) + [vm_name_prefix + '%d' | format(item + start_number | int) + '.shadowman.dev'] }}"
  loop: "{{ range(0, number_of_vms) | list }}"
  loop_control:
    index_var: item
  when: operating_system is match("RHEL.*")

- name: Create all Windows VM Names
  ansible.builtin.set_fact:
    vm_names: "{{ vm_names | default([]) + [vm_name_prefix + '%d' | format(item + start_number | int) + '.ad.shadowman.dev'] }}"
  loop: "{{ range(0, number_of_vms) | list }}"
  loop_control:
    index_var: item
  when: operating_system is match("Win.*")

- name: Pass along to remainder of workflow
  ansible.builtin.set_stats:
    data:
      vm_name: "{{ vm_names | join(',') }}"
